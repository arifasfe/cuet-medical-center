{"ast":null,"code":"var _jsxFileName = \"E:\\\\CSE stuffs\\\\ML\\\\CUET Medical Center\\\\ui\\\\cuetmedicalui\\\\src\\\\Components\\\\Home.js\";\nimport React from 'react';\nimport { Card, CardBody, CardText, CardTitle } from 'reactstrap';\nimport { getCurrentDayOfWeek, getCurrentTimeSlot } from './Roster';\nimport variables from '../variables';\n\n// Function to fetch unverified students count\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchUnverifiedCount = () => {\n  return fetch(variables.API_URL + 'unverified/').then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).then(data => {\n    console.log(data); // Log the entire response data\n    return data.length; // Return the count of unverified students\n  }).catch(error => {\n    console.error('Error:', error);\n  });\n};\n\n// Function to fetch the currently available doctor\nconst fetchAvailableDoctor = () => {\n  const currentDayOfWeek = getCurrentDayOfWeek();\n  const currentTimeSlot = getCurrentTimeSlot();\n  return fetch(variables.API_URL + 'roster/').then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).then(rosterList => {\n    console.log(rosterList); // Log the entire response data\n    // Find the roster for the current day and time slot\n    const currentRoster = rosterList.data.find(roster => roster.dayslot.day === currentDayOfWeek && roster.dayslot.slot === currentTimeSlot);\n    // Return the doctor from the current roster, or null if no roster found\n    return currentRoster ? currentRoster.doctor : null;\n  }).catch(error => {\n    console.error('Error:', error);\n  });\n};\nconst fetchRegisteredStudents = () => {\n  return fetch(variables.API_URL + 'user/').then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).then(data => {\n    if ('data' in data && Array.isArray(data.data)) {\n      const students = data.data.map(student => {\n        if (!student.is_staff && !student.is_superuser && !student.verified) {\n          return student;\n        }\n        return null;\n      }).filter(student => student !== null); // Remove undefined values\n      return students.length; // Return the count of registered students\n    } else {\n      throw new Error('Unexpected data format');\n    }\n  }).catch(error => {\n    console.error('Error:', error);\n  });\n};\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      unverifiedCount: 0,\n      availableDoctor: null,\n      registeredStudentsCount: 0\n    };\n  }\n  componentDidMount() {\n    Promise.all([fetchUnverifiedCount(), fetchAvailableDoctor(), fetchRegisteredStudents()]).then(([unverifiedCount, availableDoctor, registeredStudentsCount]) => {\n      this.setState({\n        unverifiedCount,\n        availableDoctor,\n        registeredStudentsCount,\n        forceUpdate: !this.state.forceUpdate\n      }, () => {\n        console.log(\"Unverified Count: \", unverifiedCount);\n        console.log(\"Available Doctor: \", availableDoctor);\n        console.log(\"Registered Students Count: \", registeredStudentsCount);\n      });\n    });\n  }\n  render() {\n    const {\n      unverifiedCount,\n      availableDoctor,\n      registeredStudentsCount\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n            tag: 'h5',\n            children: \"Students to Be Verified:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardText, {\n            children: unverifiedCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(CardText, {\n            children: [\"Doctor On Duty: \", availableDoctor ? availableDoctor.doctor_name : 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(CardText, {\n            children: [\"Registered Students: \", registeredStudentsCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(CardText, {\n            children: [\"Current Slot: \", getCurrentTimeSlot()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Home;","map":{"version":3,"names":["React","Card","CardBody","CardText","CardTitle","getCurrentDayOfWeek","getCurrentTimeSlot","variables","jsxDEV","_jsxDEV","fetchUnverifiedCount","fetch","API_URL","then","response","ok","Error","json","data","console","log","length","catch","error","fetchAvailableDoctor","currentDayOfWeek","currentTimeSlot","rosterList","currentRoster","find","roster","dayslot","day","slot","doctor","fetchRegisteredStudents","Array","isArray","students","map","student","is_staff","is_superuser","verified","filter","Home","Component","constructor","props","state","unverifiedCount","availableDoctor","registeredStudentsCount","componentDidMount","Promise","all","setState","forceUpdate","render","children","tag","fileName","_jsxFileName","lineNumber","columnNumber","doctor_name"],"sources":["E:/CSE stuffs/ML/CUET Medical Center/ui/cuetmedicalui/src/Components/Home.js"],"sourcesContent":["import React from 'react';\r\nimport { Card, CardBody, CardText, CardTitle } from 'reactstrap';\r\nimport { getCurrentDayOfWeek, getCurrentTimeSlot } from './Roster';\r\nimport variables from '../variables';\r\n\r\n// Function to fetch unverified students count\r\nconst fetchUnverifiedCount = () => {\r\n    return fetch(variables.API_URL + 'unverified/')\r\n       .then(response => {\r\n         if (!response.ok) {\r\n           throw new Error('Network response was not ok');\r\n         }\r\n         return response.json();\r\n       })\r\n       .then(data => {\r\n         console.log(data); // Log the entire response data\r\n         return data.length; // Return the count of unverified students\r\n       })\r\n       .catch(error => {\r\n         console.error('Error:', error);\r\n       });\r\n   };\r\n   \r\n   // Function to fetch the currently available doctor\r\nconst fetchAvailableDoctor = () => {\r\n    const currentDayOfWeek = getCurrentDayOfWeek();\r\n    const currentTimeSlot = getCurrentTimeSlot();\r\n   \r\n    return fetch(variables.API_URL + 'roster/')\r\n       .then(response => {\r\n         if (!response.ok) {\r\n           throw new Error('Network response was not ok');\r\n         }\r\n         return response.json();\r\n       })\r\n       .then(rosterList => {\r\n         console.log(rosterList); // Log the entire response data\r\n         // Find the roster for the current day and time slot\r\n         const currentRoster = rosterList.data.find(roster => \r\n           roster.dayslot.day === currentDayOfWeek && roster.dayslot.slot === currentTimeSlot\r\n         );\r\n         // Return the doctor from the current roster, or null if no roster found\r\n         return currentRoster ? currentRoster.doctor : null;\r\n       })\r\n       .catch(error => {\r\n         console.error('Error:', error);\r\n       });\r\n   };\r\n   const fetchRegisteredStudents = () => {\r\n    return fetch(variables.API_URL + 'user/')\r\n       .then(response => {\r\n         if (!response.ok) {\r\n           throw new Error('Network response was not ok');\r\n         }\r\n         return response.json();\r\n       })\r\n       .then(data => {\r\n         if ('data' in data && Array.isArray(data.data)) {\r\n           const students = data.data.map(student => {\r\n             if (!student.is_staff && !student.is_superuser && !student.verified) {\r\n               return student;\r\n             }\r\n             return null;\r\n           }).filter(student => student !== null); // Remove undefined values\r\n           return students.length; // Return the count of registered students\r\n         } else {\r\n           throw new Error('Unexpected data format');\r\n         }\r\n       })\r\n       .catch(error => {\r\n         console.error('Error:', error);\r\n       });\r\n   };\r\n\r\n   \r\n   \r\n\r\nclass Home extends React.Component {\r\n constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      unverifiedCount: 0,\r\n      availableDoctor: null,\r\n      registeredStudentsCount: 0,\r\n    };\r\n }\r\n\r\n componentDidMount() {\r\n    Promise.all([fetchUnverifiedCount(), fetchAvailableDoctor(), fetchRegisteredStudents()])\r\n      .then(([unverifiedCount, availableDoctor, registeredStudentsCount]) => {\r\n        this.setState({ unverifiedCount, availableDoctor, registeredStudentsCount, forceUpdate: !this.state.forceUpdate }, () => {\r\n          console.log(\"Unverified Count: \", unverifiedCount);\r\n          console.log(\"Available Doctor: \", availableDoctor);\r\n          console.log(\"Registered Students Count: \", registeredStudentsCount);\r\n        });\r\n      });\r\n }\r\n\r\n\r\n render() {\r\n    const { unverifiedCount, availableDoctor, registeredStudentsCount } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Card>\r\n          <CardBody>\r\n            <CardTitle tag={'h5'}>Students to Be Verified:</CardTitle>\r\n            <CardText>\r\n            {unverifiedCount}\r\n            </CardText>\r\n          </CardBody>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardBody>\r\n            <CardText>\r\n              Doctor On Duty: {availableDoctor ? availableDoctor.doctor_name : 'N/A'}\r\n            </CardText>\r\n          </CardBody>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardBody>\r\n            <CardText>\r\n              Registered Students: {registeredStudentsCount}\r\n            </CardText>\r\n          </CardBody>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardBody>\r\n            <CardText>\r\n              Current Slot: {getCurrentTimeSlot()}\r\n            </CardText>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    );\r\n }\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}