{"ast":null,"code":"import React,{Component}from\"react\";import variables from'./../variables';import{Button,Popover,PopoverBody,Alert,Table,Modal,ModalHeader,ModalBody,FormGroup,Label,Input,ModalFooter,Dropdown,DropdownToggle,DropdownMenu,DropdownItem}from'reactstrap';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function getMonthName(){const months=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];const d=new Date();return months[d.getUTCMonth()];}export function getCurrentTimeSlot(){const hours=new Date().getHours();if(hours>=21||hours<9){return'Evening';}else if(hours>=9&&hours<15){return'Morning';}else{return'Noon';}}export function getCurrentDayOfWeek(){const days=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];return days[new Date().getDay()];}export class Roster extends Component{constructor(props){super(props);this.changeRosterId=e=>{this.setState({roster_id:e.target.value});};this.changeMonth=e=>{this.setState({month:e.target.value});};this.changeYear=e=>{this.setState({year:e.target.value});};this.toggle=()=>{this.setState(prevState=>({showModal:!prevState.showModal}));};this.toggleDropdownDoctor=()=>{this.setState(prevState=>({dropdownOpenDoctor:!prevState.dropdownOpenDoctor}));};this.toggleDropdownDayslot=()=>{this.setState(prevState=>({dropdownOpenDayslot:!prevState.dropdownOpenDayslot}));};this.addClick=()=>{this.setState({modalTitle:\"Add Roster\",roster_id:\"\",month:\"\",year:\"\",selectedDoctorId:\"\",selectedDayslotId:\"\"});this.toggle();};this.createClick=()=>{// Construct the URL with the month, year, doctor, and dayslot as parameters\nconst url=\"\".concat(variables.API_URL,\"roster/?month=\").concat(this.state.month,\"&year=\").concat(this.state.year,\"&doctor=\").concat(this.state.selectedDoctorId,\"&dayslot=\").concat(this.state.selectedDayslotId);// Make a GET request to the roster API\nfetch(url).then(res=>res.json()).then(result=>{// If a roster with the same month, year, doctor, and dayslot already exists, show an alert and return\nif(result.length>0){alert('Roster already exists.');return;}// Otherwise, make a POST request to create a new roster\nfetch(variables.API_URL+'roster/',{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({roster_id:this.state.roster_id,month:this.state.month,year:this.state.year,doctor:this.state.selectedDoctorId,dayslot:this.state.selectedDayslotId})}).then(res=>res.json()).then(result=>{alert(JSON.stringify(result));this.refreshList();},error=>{alert('Failed');});});};this.state={roster_id:0,month:\"\",year:\"\",modalTitle:\"\",doctor:{doctor_id:\"\",doctor_name:\"\"},rosters:[],groupedByDay:{},dayslot:{day:\"\",slot:\"\"},doctors:[],dayslots:[],showModal:false,dropdownOpenDoctor:false,dropdownOpenDayslot:false};}refreshList(){fetch(variables.API_URL+'roster/').then(response=>response.json()).then(data=>{if('data'in data&&Array.isArray(data.data)){// Group the rosters by day\nconst groupedByDay=data.data.reduce((acc,roster)=>{const day=roster.dayslot.day;if(!acc[day]){acc[day]=[];}acc[day].push(roster);return acc;},{});this.setState({rosters:data.data,groupedByDay:groupedByDay// Store the grouped rosters in the state\n});}else{console.error('Expected an object with a data property containing an array, but got ',data);}});fetch(variables.API_URL+'dayslot/').then(response=>response.json()).then(data=>{if('data'in data&&Array.isArray(data.data)){const dayslots=data.data.map(dayslot=>{return{id:dayslot.id,day:dayslot.day,slot:dayslot.slot};});console.log(dayslots);// Log the mapped dayslots array\nthis.setState({dayslots:dayslots});}else{console.error('Expected an object with a data property containing an array of dayslot objects, but got ',data);}});fetch(variables.API_URL+'doctor/').then(response=>response.json()).then(data=>{if('data'in data&&Array.isArray(data.data)){const doctors=data.data.map(doctor=>{return{doctor_id:doctor.doctor_id,doctor_name:doctor.doctor_name,specialization:doctor.specialization};});console.log(doctors);// Log the mapped doctors array\nthis.setState({doctors:doctors});}else{console.error('Expected an object with a data property containing an array of doctor objects, but got ',data);}});}componentDidMount(){this.refreshList();}handleDoctorSelection(selectedId){this.setState({selectedDoctorId:selectedId});}handleDayslotSelection(selectedId){// Update the state\nthis.setState({selectedDayslotId:selectedId});}groupByDay(rosters){return rosters.reduce((groups,roster)=>{const day=roster.dayslot.day;if(!groups[day]){groups[day]=[];}groups[day].push(roster);return groups;},{});}deleteClick(id){if(window.confirm('Are you sure?')){fetch(variables.API_URL+'roster/'+id,{method:'DELETE',headers:{'Accept':'application/json','Content-Type':'application/json'}}).then(res=>res.json()).then(result=>{alert(result);this.refreshList();},error=>{alert('Failed');});}}render(){var _rosters$;const{rosters,modalTitle,groupedByDay,roster_id,month,year,doctors,dayslots,showModal,doctor:{doctor_id,doctor_name},dayslot:{day,slot},selectedDoctorId,selectedDayslotId}=this.state;const now=new Date();const utcMonth=now.getUTCMonth()+1;// getUTCMonth returns 0-based month index, so we add 1\nconst utcYear=now.getUTCFullYear();const currentDayOfWeek=getCurrentDayOfWeek();const currentTimeSlot=getCurrentTimeSlot();const currentDoctor=this.state.rosters.find(roster=>roster.dayslot.day===currentDayOfWeek&&roster.dayslot.slot===getCurrentTimeSlot());return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{color:\"secondary\",className:\"mt-3 mx-auto\",style:{maxWidth:'80%',display:'flex',justifyContent:'space-between',alignItems:'center'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',gap:'1rem'},children:[/*#__PURE__*/_jsxs(Alert,{color:\"primary\",className:\"float-start\",children:[\"Doctor Roster:\",/*#__PURE__*/_jsxs(\"h4\",{children:[\" \",getMonthName((_rosters$=rosters[0])===null||_rosters$===void 0?void 0:_rosters$.month),\" \"]})]}),/*#__PURE__*/_jsxs(Alert,{color:\"info \",className:\"float-start\",children:[\"Current Day:\",/*#__PURE__*/_jsxs(\"h4\",{children:[\" \",currentDayOfWeek,\" \"]})]}),/*#__PURE__*/_jsxs(Alert,{color:\"info\",className:\"float-start\",children:[\"Current Time Slot: \",/*#__PURE__*/_jsx(\"h4\",{children:getCurrentTimeSlot()})]}),/*#__PURE__*/_jsxs(Alert,{color:\"success\",className:\"float-start\",children:[\"Doctor on Duty: \",/*#__PURE__*/_jsx(\"h4\",{children:currentDoctor?currentDoctor.doctor.doctor_name:'No Doctor Assigned'})]}),/*#__PURE__*/_jsxs(Alert,{color:\"dark\",className:\"float-end\",children:[\"Time Slots: \",/*#__PURE__*/_jsx(\"h6\",{children:\" Morning(9:00-15:00)\"}),/*#__PURE__*/_jsx(\"h6\",{children:\"Noon(15:00-21:00)\"}),/*#__PURE__*/_jsx(\"h6\",{children:\"Evening(21:00-9:00)\"})]})]}),/*#__PURE__*/_jsx(Button,{color:\"primary\",className:\"float-end\",onClick:this.addClick,children:\"Update Roster\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mt-3 mx-auto\",style:{maxWidth:'90%'},children:/*#__PURE__*/_jsxs(Table,{bordered:true,className:\"mt-3 mx-auto\",style:{maxWidth:'90%',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Day\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Slot\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Doctor Name\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Options\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:Object.keys(groupedByDay).map((day,dayIndex)=>/*#__PURE__*/_jsx(React.Fragment,{children:groupedByDay[day].map((roster,rosterIndex)=>{// Only render the roster if its month and year match the current UTC month and year\nif(roster.month===utcMonth&&roster.year===utcYear){return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:day}),/*#__PURE__*/_jsx(\"td\",{children:roster.dayslot.slot}),/*#__PURE__*/_jsx(\"td\",{children:roster.doctor.doctor_name}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(Button,{outline:true,color:\"danger\",onClick:()=>this.deleteClick(roster.roster_id),children:/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"16\",height:\"16\",fill:\"currentColor\",className:\"bi bi-trash-fill\",viewBox:\"0 0 16 16\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\"})})})})]},roster.roster_id);}})},dayIndex))})]})}),/*#__PURE__*/_jsxs(Modal,{isOpen:showModal,toggle:this.toggle,children:[/*#__PURE__*/_jsx(ModalHeader,{toggle:this.toggle,children:\"Add Roster\"}),/*#__PURE__*/_jsxs(ModalBody,{children:[/*#__PURE__*/_jsxs(FormGroup,{children:[/*#__PURE__*/_jsx(Label,{for:\"month\",children:\"Month\"}),/*#__PURE__*/_jsxs(Input,{type:\"select\",name:\"month\",id:\"month\",value:this.state.month,onChange:this.changeMonth,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Month\"}),/*#__PURE__*/_jsx(\"option\",{value:\"1\",children:\"January\"}),/*#__PURE__*/_jsx(\"option\",{value:\"2\",children:\"February\"}),/*#__PURE__*/_jsx(\"option\",{value:\"3\",children:\"March\"}),/*#__PURE__*/_jsx(\"option\",{value:\"4\",children:\"April\"}),/*#__PURE__*/_jsx(\"option\",{value:\"5\",children:\"May\"}),/*#__PURE__*/_jsx(\"option\",{value:\"6\",children:\"June\"}),/*#__PURE__*/_jsx(\"option\",{value:\"7\",children:\"July\"}),/*#__PURE__*/_jsx(\"option\",{value:\"8\",children:\"August\"}),/*#__PURE__*/_jsx(\"option\",{value:\"9\",children:\"September\"}),/*#__PURE__*/_jsx(\"option\",{value:\"10\",children:\"October\"}),/*#__PURE__*/_jsx(\"option\",{value:\"11\",children:\"November\"}),/*#__PURE__*/_jsx(\"option\",{value:\"12\",children:\"December\"})]})]}),/*#__PURE__*/_jsxs(FormGroup,{children:[/*#__PURE__*/_jsx(Label,{for:\"year\",children:\"Year\"}),/*#__PURE__*/_jsx(Input,{type:\"number\",name:\"year\",id:\"year\",value:this.state.year,onChange:this.changeYear})]}),/*#__PURE__*/_jsxs(FormGroup,{children:[/*#__PURE__*/_jsx(Label,{for:\"doctor\",children:\"Doctor\"}),/*#__PURE__*/_jsxs(Dropdown,{isOpen:this.state.dropdownOpenDoctor,toggle:this.toggleDropdownDoctor,children:[/*#__PURE__*/_jsx(DropdownToggle,{caret:true,children:this.state.selectedDoctorId?this.state.selectedDoctorId:\"Select Doctor\"}),/*#__PURE__*/_jsx(DropdownMenu,{children:this.state.doctors.map(doctor=>/*#__PURE__*/_jsxs(DropdownItem,{onClick:()=>this.handleDoctorSelection(doctor.doctor_id),children:[doctor.doctor_name,\" - \",doctor.specialization]},doctor.doctor_id))})]})]}),/*#__PURE__*/_jsxs(FormGroup,{children:[/*#__PURE__*/_jsx(Label,{for:\"dayslot\",children:\"Day Slot\"}),/*#__PURE__*/_jsxs(Dropdown,{isOpen:this.state.dropdownOpenDayslot,toggle:this.toggleDropdownDayslot,children:[/*#__PURE__*/_jsx(DropdownToggle,{caret:true,children:this.state.selectedDayslotId?this.state.selectedDayslotId:\"Select Day Slot\"}),/*#__PURE__*/_jsx(DropdownMenu,{children:/*#__PURE__*/_jsx(\"div\",{style:{maxHeight:'200px',overflowY:'auto'},children:this.state.dayslots.map(dayslot=>/*#__PURE__*/_jsxs(DropdownItem,{onClick:()=>this.handleDayslotSelection(dayslot.id),children:[dayslot.day,\"-\",dayslot.slot]},dayslot.id))})})]})]})]}),/*#__PURE__*/_jsxs(ModalFooter,{children:[/*#__PURE__*/_jsx(Button,{color:\"primary\",onClick:this.createClick,children:\"Save\"}),/*#__PURE__*/_jsx(Button,{color:\"secondary\",onClick:this.toggle,children:\"Cancel\"})]})]})]});}}export default Roster;","map":{"version":3,"names":["React","Component","variables","Button","Popover","PopoverBody","Alert","Table","Modal","ModalHeader","ModalBody","FormGroup","Label","Input","ModalFooter","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","jsxs","_jsxs","jsx","_jsx","getMonthName","months","d","Date","getUTCMonth","getCurrentTimeSlot","hours","getHours","getCurrentDayOfWeek","days","getDay","Roster","constructor","props","changeRosterId","e","setState","roster_id","target","value","changeMonth","month","changeYear","year","toggle","prevState","showModal","toggleDropdownDoctor","dropdownOpenDoctor","toggleDropdownDayslot","dropdownOpenDayslot","addClick","modalTitle","selectedDoctorId","selectedDayslotId","createClick","url","concat","API_URL","state","fetch","then","res","json","result","length","alert","method","headers","body","JSON","stringify","doctor","dayslot","refreshList","error","doctor_id","doctor_name","rosters","groupedByDay","day","slot","doctors","dayslots","response","data","Array","isArray","reduce","acc","roster","push","console","map","id","log","specialization","componentDidMount","handleDoctorSelection","selectedId","handleDayslotSelection","groupByDay","groups","deleteClick","window","confirm","render","_rosters$","now","utcMonth","utcYear","getUTCFullYear","currentDayOfWeek","currentTimeSlot","currentDoctor","find","children","color","className","style","maxWidth","display","justifyContent","alignItems","gap","onClick","bordered","textAlign","Object","keys","dayIndex","Fragment","rosterIndex","outline","xmlns","width","height","fill","viewBox","isOpen","for","type","name","onChange","caret","maxHeight","overflowY"],"sources":["E:/CSE stuffs/ML/CUET Medical Center/ui/cuetmedicalui/src/Components/Roster.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport variables from './../variables';\r\nimport { Button, Popover, PopoverBody, Alert, Table, Modal, ModalHeader, ModalBody, FormGroup, Label, Input, ModalFooter, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\n\r\nfunction getMonthName() {\r\n    const months = [\r\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n    const d = new Date();\r\n    return months[d.getUTCMonth()];\r\n}\r\n\r\nexport function getCurrentTimeSlot() {\r\n    const hours = new Date().getHours();\r\n    if (hours >= 21 || hours < 9) {\r\n        return 'Evening';\r\n    } else if (hours >= 9 && hours < 15) {\r\n        return 'Morning';\r\n    } else {\r\n        return 'Noon';\r\n    }\r\n}\r\n\r\nexport function getCurrentDayOfWeek() {\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    return days[new Date().getDay()];\r\n}\r\n\r\nexport class Roster extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            roster_id: 0,\r\n            month: \"\",\r\n            year: \"\",\r\n            modalTitle: \"\",\r\n            doctor: {\r\n                doctor_id: \"\",\r\n                doctor_name: \"\",\r\n            },\r\n            rosters: [],\r\n            groupedByDay: {},\r\n            dayslot: {\r\n                day: \"\",\r\n                slot: \"\",\r\n            },\r\n            doctors: [],\r\n            dayslots: [],\r\n            showModal: false,\r\n            dropdownOpenDoctor: false,\r\n            dropdownOpenDayslot: false\r\n        }\r\n    }\r\n    refreshList() {\r\n\r\n        fetch(variables.API_URL + 'roster/')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if ('data' in data && Array.isArray(data.data)) {\r\n                    // Group the rosters by day\r\n                    const groupedByDay = data.data.reduce((acc, roster) => {\r\n                        const day = roster.dayslot.day;\r\n                        if (!acc[day]) {\r\n                            acc[day] = [];\r\n                        }\r\n                        acc[day].push(roster);\r\n                        return acc;\r\n                    }, {});\r\n\r\n                    this.setState({\r\n                        rosters: data.data,\r\n                        groupedByDay: groupedByDay // Store the grouped rosters in the state\r\n                    });\r\n                } else {\r\n                    console.error('Expected an object with a data property containing an array, but got ', data);\r\n                }\r\n            });\r\n\r\n\r\n        fetch(variables.API_URL + 'dayslot/')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if ('data' in data && Array.isArray(data.data)) {\r\n                    const dayslots = data.data.map(dayslot => {\r\n                        return {\r\n                            id: dayslot.id,\r\n                            day: dayslot.day,\r\n                            slot: dayslot.slot\r\n                        };\r\n                    });\r\n                    console.log(dayslots); // Log the mapped dayslots array\r\n                    this.setState({\r\n                        dayslots: dayslots\r\n                    });\r\n                } else {\r\n                    console.error('Expected an object with a data property containing an array of dayslot objects, but got ', data);\r\n                }\r\n            });\r\n\r\n\r\n\r\n        fetch(variables.API_URL + 'doctor/')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if ('data' in data && Array.isArray(data.data)) {\r\n                    const doctors = data.data.map(doctor => {\r\n                        return {\r\n                            doctor_id: doctor.doctor_id,\r\n                            doctor_name: doctor.doctor_name,\r\n                            specialization: doctor.specialization\r\n                        };\r\n                    });\r\n                    console.log(doctors); // Log the mapped doctors array\r\n                    this.setState({\r\n                        doctors: doctors\r\n                    });\r\n                } else {\r\n                    console.error('Expected an object with a data property containing an array of doctor objects, but got ', data);\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshList();\r\n    }\r\n    changeRosterId = (e) => {\r\n        this.setState({ roster_id: e.target.value })\r\n    }\r\n    changeMonth = (e) => {\r\n        this.setState({ month: e.target.value })\r\n    }\r\n    changeYear = (e) => {\r\n        this.setState({ year: e.target.value })\r\n    }\r\n    toggle = () => {\r\n        this.setState(prevState => ({\r\n            showModal: !prevState.showModal\r\n        }));\r\n    };\r\n\r\n    toggleDropdownDoctor = () => {\r\n        this.setState(prevState => ({\r\n            dropdownOpenDoctor: !prevState.dropdownOpenDoctor\r\n        }));\r\n    };\r\n\r\n    toggleDropdownDayslot = () => {\r\n        this.setState(prevState => ({\r\n            dropdownOpenDayslot: !prevState.dropdownOpenDayslot\r\n        }));\r\n    };\r\n\r\n\r\n    addClick = () => {\r\n        this.setState({\r\n            modalTitle: \"Add Roster\",\r\n            roster_id: \"\",\r\n            month: \"\",\r\n            year: \"\",\r\n            selectedDoctorId: \"\",\r\n            selectedDayslotId: \"\"\r\n        });\r\n        this.toggle();\r\n    }\r\n\r\n    handleDoctorSelection(selectedId) {\r\n        this.setState({\r\n            selectedDoctorId: selectedId\r\n        });\r\n    }\r\n\r\n    handleDayslotSelection(selectedId) {\r\n        // Update the state\r\n        this.setState({\r\n            selectedDayslotId: selectedId\r\n        });\r\n    }\r\n\r\n\r\n\r\n    createClick = () => {\r\n        // Construct the URL with the month, year, doctor, and dayslot as parameters\r\n        const url = `${variables.API_URL}roster/?month=${this.state.month}&year=${this.state.year}&doctor=${this.state.selectedDoctorId}&dayslot=${this.state.selectedDayslotId}`;\r\n\r\n        // Make a GET request to the roster API\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                // If a roster with the same month, year, doctor, and dayslot already exists, show an alert and return\r\n                if (result.length > 0) {\r\n                    alert('Roster already exists.');\r\n                    return;\r\n                }\r\n\r\n                // Otherwise, make a POST request to create a new roster\r\n                fetch(variables.API_URL + 'roster/', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        roster_id: this.state.roster_id,\r\n                        month: this.state.month,\r\n                        year: this.state.year,\r\n                        doctor: this.state.selectedDoctorId,\r\n                        dayslot: this.state.selectedDayslotId\r\n                    })\r\n                })\r\n                    .then(res => res.json())\r\n                    .then(result => {\r\n                        alert(JSON.stringify(result));\r\n                        this.refreshList();\r\n                    }, (error) => {\r\n                        alert('Failed');\r\n                    })\r\n            })\r\n    }\r\n\r\n    groupByDay(rosters) {\r\n        return rosters.reduce((groups, roster) => {\r\n            const day = roster.dayslot.day;\r\n            if (!groups[day]) {\r\n                groups[day] = [];\r\n            }\r\n            groups[day].push(roster);\r\n            return groups;\r\n        }, {});\r\n    }\r\n\r\n    deleteClick(id) {\r\n        if (window.confirm('Are you sure?')) {\r\n            fetch(variables.API_URL + 'roster/' + id, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(result => {\r\n                    alert(result);\r\n                    this.refreshList();\r\n\r\n                }, (error) => {\r\n                    alert('Failed');\r\n                })\r\n        }\r\n    }\r\n\r\n    \r\n    render() {\r\n        const {\r\n            rosters,\r\n            modalTitle,\r\n            groupedByDay,\r\n            roster_id,\r\n            month,\r\n            year,\r\n            doctors,\r\n            dayslots,\r\n            showModal,\r\n            doctor: {\r\n                doctor_id,\r\n                doctor_name,\r\n            },\r\n            dayslot: {\r\n                day,\r\n                slot,\r\n            },\r\n            selectedDoctorId,\r\n            selectedDayslotId\r\n        } = this.state;\r\n\r\n\r\n\r\n        const now = new Date();\r\n        const utcMonth = now.getUTCMonth() + 1; // getUTCMonth returns 0-based month index, so we add 1\r\n        const utcYear = now.getUTCFullYear();\r\n        const currentDayOfWeek = getCurrentDayOfWeek();\r\n        const currentTimeSlot = getCurrentTimeSlot();\r\n        const currentDoctor = this.state.rosters.find(roster => roster.dayslot.day === currentDayOfWeek && roster.dayslot.slot === getCurrentTimeSlot());\r\n\r\n\r\n        return (\r\n            <div>\r\n                <div color=\"secondary\" className=\"mt-3 mx-auto\" style={{ maxWidth: '80%', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    <div style={{ display: 'flex', gap: '1rem' }}>\r\n                        <Alert color=\"primary\" className=\"float-start\">\r\n                            Doctor Roster:<h4> {getMonthName(rosters[0]?.month)} </h4>\r\n                        </Alert>\r\n                        <Alert color=\"info \" className=\"float-start\">\r\n                            Current Day:<h4> {currentDayOfWeek} </h4>\r\n                        </Alert>\r\n                        <Alert color=\"info\" className=\"float-start\">\r\n                            Current Time Slot: <h4>{getCurrentTimeSlot()}</h4>\r\n                        </Alert>\r\n                        <Alert color=\"success\" className=\"float-start\">\r\n                            Doctor on Duty: <h4>{currentDoctor ? currentDoctor.doctor.doctor_name : 'No Doctor Assigned'}</h4>\r\n                        </Alert>\r\n                        <Alert color=\"dark\" className=\"float-end\">\r\n                            Time Slots: <h6> Morning(9:00-15:00)</h6><h6>Noon(15:00-21:00)</h6><h6>Evening(21:00-9:00)</h6>\r\n                        </Alert>\r\n                    </div>\r\n                    <Button color=\"primary\" className=\"float-end\" onClick={this.addClick}>\r\n                        Update Roster\r\n                    </Button>\r\n                </div>\r\n\r\n                <div className=\"mt-3 mx-auto\" style={{ maxWidth: '90%' }}>\r\n\r\n                    <Table bordered className=\"mt-3 mx-auto\" style={{ maxWidth: '90%', textAlign: 'center' }}>\r\n                        <thead>\r\n                            <tr>\r\n                                \r\n                                <th>Day</th>\r\n                                <th>Slot</th>\r\n                                <th>Doctor Name</th>\r\n                                <th>Options</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n\r\n                            {Object.keys(groupedByDay).map((day, dayIndex) => (\r\n                                <React.Fragment key={dayIndex}>\r\n                                    {groupedByDay[day].map((roster, rosterIndex) => {\r\n                                        // Only render the roster if its month and year match the current UTC month and year\r\n                                        if (roster.month === utcMonth && roster.year === utcYear) {\r\n                                            return (\r\n                                                <tr key={roster.roster_id}>\r\n                                                    \r\n                                                    <td>{day}</td>\r\n                                                    <td>{roster.dayslot.slot}</td>\r\n                                                    <td>{roster.doctor.doctor_name}</td>\r\n                                                    <td>\r\n                                                        <Button outline color=\"danger\" onClick={() => this.deleteClick(roster.roster_id)}>\r\n                                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-trash-fill\" viewBox=\"0 0 16 16\">\r\n                                                                <path d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\" />\r\n                                                            </svg>\r\n                                                        </Button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        }\r\n                                    })}\r\n                                </React.Fragment>\r\n                            ))}\r\n\r\n                        </tbody>\r\n                    </Table>\r\n\r\n\r\n                </div>\r\n\r\n                <Modal isOpen={showModal} toggle={this.toggle}>\r\n                    <ModalHeader toggle={this.toggle}>Add Roster</ModalHeader>\r\n\r\n                    <ModalBody>\r\n                        <FormGroup>\r\n                            <Label for=\"month\">Month</Label>\r\n                            <Input type=\"select\" name=\"month\" id=\"month\" value={this.state.month} onChange={this.changeMonth}>\r\n                                <option value=\"\">Select Month</option>\r\n                                <option value=\"1\">January</option>\r\n                                <option value=\"2\">February</option>\r\n                                <option value=\"3\">March</option>\r\n                                <option value=\"4\">April</option>\r\n                                <option value=\"5\">May</option>\r\n                                <option value=\"6\">June</option>\r\n                                <option value=\"7\">July</option>\r\n                                <option value=\"8\">August</option>\r\n                                <option value=\"9\">September</option>\r\n                                <option value=\"10\">October</option>\r\n                                <option value=\"11\">November</option>\r\n                                <option value=\"12\">December</option>\r\n                            </Input>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"year\">Year</Label>\r\n                            <Input type=\"number\" name=\"year\" id=\"year\" value={this.state.year} onChange={this.changeYear} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"doctor\">Doctor</Label>\r\n                            <Dropdown isOpen={this.state.dropdownOpenDoctor} toggle={this.toggleDropdownDoctor}>\r\n                                <DropdownToggle caret>\r\n                                    {this.state.selectedDoctorId ? this.state.selectedDoctorId : \"Select Doctor\"}\r\n                                </DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    {this.state.doctors.map((doctor) => (\r\n                                        <DropdownItem key={doctor.doctor_id} onClick={() => this.handleDoctorSelection(doctor.doctor_id)}>\r\n                                            {doctor.doctor_name} - {doctor.specialization}\r\n                                        </DropdownItem>\r\n                                    ))}\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"dayslot\">Day Slot</Label>\r\n                            <Dropdown isOpen={this.state.dropdownOpenDayslot} toggle={this.toggleDropdownDayslot}>\r\n                                <DropdownToggle caret>\r\n                                    {this.state.selectedDayslotId ? this.state.selectedDayslotId : \"Select Day Slot\"}\r\n                                </DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    <div style={{ maxHeight: '200px', overflowY: 'auto' }}>\r\n                                        {this.state.dayslots.map((dayslot) => (\r\n                                            <DropdownItem key={dayslot.id} onClick={() => this.handleDayslotSelection(dayslot.id)}>\r\n                                                {dayslot.day}-{dayslot.slot}\r\n                                            </DropdownItem>\r\n                                        ))}\r\n                                    </div>\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </FormGroup>\r\n\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={this.createClick}>Save</Button>\r\n                        <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\nexport default Roster;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}