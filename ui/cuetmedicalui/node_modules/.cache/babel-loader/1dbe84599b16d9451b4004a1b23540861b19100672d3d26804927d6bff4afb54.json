{"ast":null,"code":"var _jsxFileName = \"E:\\\\CSE stuffs\\\\ML\\\\CUET Medical Center\\\\ui\\\\cuetmedicalui\\\\src\\\\stuComponents\\\\StudentRoster.js\";\nimport React, { Component } from \"react\";\nimport variables from './../variables';\nimport { Button, Table, Alert, Modal, ModalHeader, ModalBody, FormGroup, Label, Input, ModalFooter, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getMonthName(monthNumber) {\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  return months[monthNumber - 1];\n}\nexport class StudentRoster extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      roster_id: 0,\n      month: \"\",\n      year: \"\",\n      modalTitle: \"\",\n      doctor: {\n        doctor_id: \"\",\n        doctor_name: \"\"\n      },\n      rosters: [],\n      groupedByDay: {},\n      dayslot: {\n        day: \"\",\n        slot: \"\"\n      },\n      doctors: [],\n      dayslots: [],\n      showModal: false,\n      dropdownOpenDoctor: false,\n      dropdownOpenDayslot: false\n    };\n  }\n  refreshList() {\n    fetch(variables.API_URL + 'roster/').then(response => response.json()).then(data => {\n      if ('data' in data && Array.isArray(data.data)) {\n        // Group the rosters by day\n        const groupedByDay = data.data.reduce((acc, roster) => {\n          const day = roster.dayslot.day;\n          if (!acc[day]) {\n            acc[day] = [];\n          }\n          acc[day].push(roster);\n          return acc;\n        }, {});\n        this.setState({\n          rosters: data.data,\n          groupedByDay: groupedByDay // Store the grouped rosters in the state\n        });\n      } else {\n        console.error('Expected an object with a data property containing an array, but got ', data);\n      }\n    });\n    fetch(variables.API_URL + 'dayslot/').then(response => response.json()).then(data => {\n      if ('data' in data && Array.isArray(data.data)) {\n        const dayslots = data.data.map(dayslot => {\n          return {\n            id: dayslot.id,\n            day: dayslot.day,\n            slot: dayslot.slot\n          };\n        });\n        console.log(dayslots); // Log the mapped dayslots array\n        this.setState({\n          dayslots: dayslots\n        });\n      } else {\n        console.error('Expected an object with a data property containing an array of dayslot objects, but got ', data);\n      }\n    });\n    fetch(variables.API_URL + 'doctor/').then(response => response.json()).then(data => {\n      if ('data' in data && Array.isArray(data.data)) {\n        const doctors = data.data.map(doctor => {\n          return {\n            doctor_id: doctor.doctor_id,\n            doctor_name: doctor.doctor_name,\n            specialization: doctor.specialization\n          };\n        });\n        console.log(doctors); // Log the mapped doctors array\n        this.setState({\n          doctors: doctors\n        });\n      } else {\n        console.error('Expected an object with a data property containing an array of doctor objects, but got ', data);\n      }\n    });\n  }\n  componentDidMount() {\n    this.refreshList();\n  }\n  /* changeRosterId = (e) => {\r\n        this.setState({ roster_id: e.target.value })\r\n    }\r\n    changeMonth = (e) => {\r\n        this.setState({ month: e.target.value })\r\n    }\r\n    changeYear = (e) => {\r\n        this.setState({ year: e.target.value })\r\n    }\r\n    toggle = () => {\r\n        this.setState(prevState => ({\r\n            showModal: !prevState.showModal\r\n        }));\r\n    };\r\n          toggleDropdownDoctor = () => {\r\n        this.setState(prevState => ({\r\n            dropdownOpenDoctor: !prevState.dropdownOpenDoctor\r\n        }));\r\n    };\r\n    \r\n    toggleDropdownDayslot = () => {\r\n        this.setState(prevState => ({\r\n            dropdownOpenDayslot: !prevState.dropdownOpenDayslot\r\n        }));\r\n    };\r\n        addClick = () =>{\r\n        this.setState({\r\n            modalTitle: \"Add Roster\",\r\n            roster_id : \"\",\r\n            month : \"\",\r\n            year : \"\",\r\n            selectedDoctorId : \"\",\r\n            selectedDayslotId : \"\"\r\n        });\r\n        this.toggle();\r\n    }\r\n      handleDoctorSelection(selectedId) {\r\n        this.setState({\r\n            selectedDoctorId: selectedId\r\n        });\r\n    }\r\n    \r\n    handleDayslotSelection(selectedId) {\r\n        // Update the state\r\n        this.setState({\r\n            selectedDayslotId: selectedId\r\n        });\r\n    }\r\n     */\n\n  /*  createClick = () => {\r\n       // Construct the URL with the month, year, doctor, and dayslot as parameters\r\n       const url = `${variables.API_URL}roster/?month=${this.state.month}&year=${this.state.year}&doctor=${this.state.selectedDoctorId}&dayslot=${this.state.selectedDayslotId}`;\r\n   \r\n       // Make a GET request to the roster API\r\n       fetch(url)\r\n           .then(res => res.json())\r\n           .then(result => {\r\n               // If a roster with the same month, year, doctor, and dayslot already exists, show an alert and return\r\n               if (result.length > 0) {\r\n                   alert('Roster already exists.');\r\n                   return;\r\n               }\r\n   \r\n               // Otherwise, make a POST request to create a new roster\r\n               fetch(variables.API_URL + 'roster/', {\r\n                   method: 'POST',\r\n                   headers: {\r\n                       'Accept': 'application/json',\r\n                       'Content-Type': 'application/json'\r\n                   },\r\n                   body: JSON.stringify({\r\n                       roster_id: this.state.roster_id,\r\n                       month: this.state.month,\r\n                       year: this.state.year,\r\n                       doctor: this.state.selectedDoctorId,\r\n                       dayslot: this.state.selectedDayslotId\r\n                   })\r\n               })\r\n               .then(res => res.json())\r\n               .then(result => {\r\n                   alert(JSON.stringify(result));\r\n                   this.refreshList();\r\n               }, (error) => {\r\n                   alert('Failed');\r\n               })\r\n           })\r\n   } */\n\n  groupByDay(rosters) {\n    return rosters.reduce((groups, roster) => {\n      const day = roster.dayslot.day;\n      if (!groups[day]) {\n        groups[day] = [];\n      }\n      groups[day].push(roster);\n      return groups;\n    }, {});\n  }\n\n  /* deleteClick(id) {\r\n      if (window.confirm('Are you sure?')) {\r\n          fetch(variables.API_URL + 'roster/' + id, {\r\n              method: 'DELETE',\r\n              headers: {\r\n                  'Accept': 'application/json',\r\n                  'Content-Type': 'application/json'\r\n              }\r\n          })\r\n              .then(res => res.json())\r\n              .then(result => {\r\n                  alert(result);\r\n                  this.refreshList();\r\n                    }, (error) => {\r\n                  alert('Failed');\r\n              })\r\n      }\r\n  } */\n  render() {\n    var _rosters$;\n    const {\n      rosters,\n      /* modalTitle,\r\n      \r\n      roster_id,\r\n      month,\r\n      year,\r\n      doctors,\r\n      dayslots,\r\n      showModal, */\n      groupedByDay,\n      doctor: {\n        doctor_id,\n        doctor_name\n      },\n      dayslot: {\n        day,\n        slot\n      }\n      /* selectedDoctorId,\r\n      selectedDayslotId */\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        color: \"secondary\",\n        className: \"mt-3 mx-auto\",\n        style: {\n          maxWidth: '90%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          color: \"primary\",\n          children: [\"This is \", getMonthName((_rosters$ = rosters[0]) === null || _rosters$ === void 0 ? void 0 : _rosters$.month), \" month Roster\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        className: \"mt-3 mx-auto\",\n        style: {\n          maxWidth: '90%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Roster Id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Day\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Slot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Doctor Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.keys(groupedByDay).map((day, dayIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: groupedByDay[day].map((roster, rosterIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: rosterIndex === 0 ? dayIndex + 1 : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: rosterIndex === 0 ? day : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: roster.dayslot.slot\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: roster.doctor.doctor_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 29\n              }, this)]\n            }, roster.roster_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 25\n            }, this))\n          }, dayIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 17\n    }, this);\n  }\n}\nexport default StudentRoster;\n{/* <Modal isOpen={showModal} toggle={this.toggle}>\r\n <ModalHeader toggle={this.toggle}>Add Roster</ModalHeader>\r\n  <ModalBody>\r\n <FormGroup>\r\n <Label for=\"month\">Month</Label>\r\n <Input type=\"select\" name=\"month\" id=\"month\" value={this.state.month} onChange={this.changeMonth}>\r\n <option value=\"\">Select Month</option>\r\n <option value=\"1\">January</option>\r\n <option value=\"2\">February</option>\r\n <option value=\"3\">March</option>\r\n <option value=\"4\">April</option>\r\n <option value=\"5\">May</option>\r\n <option value=\"6\">June</option>\r\n <option value=\"7\">July</option>\r\n <option value=\"8\">August</option>\r\n <option value=\"9\">September</option>\r\n <option value=\"10\">October</option>\r\n <option value=\"11\">November</option>\r\n <option value=\"12\">December</option>\r\n </Input>\r\n </FormGroup>\r\n <FormGroup>\r\n <Label for=\"year\">Year</Label>\r\n <Input type=\"number\" name=\"year\" id=\"year\" value={this.state.year} onChange={this.changeYear} />\r\n </FormGroup>\r\n <FormGroup>\r\n <Label for=\"doctor\">Doctor</Label>\r\n <Dropdown isOpen={this.state.dropdownOpenDoctor} toggle={this.toggleDropdownDoctor}>\r\n <DropdownToggle caret>\r\n {this.state.selectedDoctorId ? this.state.selectedDoctorId : \"Select Doctor\"}\r\n </DropdownToggle>\r\n <DropdownMenu>\r\n {this.state.doctors.map((doctor) => (\r\n <DropdownItem key={doctor.doctor_id} onClick={() => this.handleDoctorSelection(doctor.doctor_id)}>\r\n {doctor.doctor_name} - {doctor.specialization}\r\n </DropdownItem>\r\n ))}\r\n </DropdownMenu>\r\n </Dropdown>\r\n </FormGroup>\r\n <FormGroup>\r\n <Label for=\"dayslot\">Day Slot</Label>\r\n <Dropdown isOpen={this.state.dropdownOpenDayslot} toggle={this.toggleDropdownDayslot}>\r\n <DropdownToggle caret>\r\n {this.state.selectedDayslotId ? this.state.selectedDayslotId : \"Select Day Slot\"}\r\n </DropdownToggle>\r\n <DropdownMenu>\r\n {this.state.dayslots.map((dayslot) => (\r\n <DropdownItem key={dayslot.id} onClick={() => this.handleDayslotSelection(dayslot.id)}>\r\n {dayslot.day}-{dayslot.slot}\r\n </DropdownItem>\r\n ))}\r\n </DropdownMenu>\r\n </Dropdown>\r\n </FormGroup>\r\n </ModalBody>\r\n                    <ModalFooter>\r\n    <Button color=\"primary\" onClick={this.createClick}>Save</Button>\r\n    <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n </ModalFooter>\r\n </Modal>  */}","map":{"version":3,"names":["React","Component","variables","Button","Table","Alert","Modal","ModalHeader","ModalBody","FormGroup","Label","Input","ModalFooter","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","jsxDEV","_jsxDEV","getMonthName","monthNumber","months","StudentRoster","constructor","props","state","roster_id","month","year","modalTitle","doctor","doctor_id","doctor_name","rosters","groupedByDay","dayslot","day","slot","doctors","dayslots","showModal","dropdownOpenDoctor","dropdownOpenDayslot","refreshList","fetch","API_URL","then","response","json","data","Array","isArray","reduce","acc","roster","push","setState","console","error","map","id","log","specialization","componentDidMount","groupByDay","groups","render","_rosters$","children","color","className","style","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","bordered","Object","keys","dayIndex","Fragment","rosterIndex"],"sources":["E:/CSE stuffs/ML/CUET Medical Center/ui/cuetmedicalui/src/stuComponents/StudentRoster.js"],"sourcesContent":["import React,{Component} from \"react\";\r\nimport variables from './../variables';\r\nimport { Button, Table,Alert, Modal, ModalHeader, ModalBody, FormGroup, Label, Input, ModalFooter, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\n\r\nfunction getMonthName(monthNumber) {\r\n  const months = [\r\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n  ];\r\n  return months[monthNumber - 1];\r\n}\r\n\r\nexport class StudentRoster extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            roster_id: 0,\r\n            month: \"\",\r\n            year:\"\",\r\n            modalTitle:\"\",\r\n            doctor: {\r\n                doctor_id:\"\",\r\n                doctor_name:\"\",\r\n            },\r\n            rosters:[],\r\n            groupedByDay: {},\r\n            dayslot:{\r\n                day:\"\",\r\n                slot:\"\",\r\n            },\r\n            doctors:[],\r\n            dayslots:[],\r\n            showModal: false,\r\n            dropdownOpenDoctor: false,\r\n            dropdownOpenDayslot: false\r\n        }\r\n    }\r\n    refreshList() {\r\n        fetch(variables.API_URL + 'roster/') \r\n          .then(response => response.json())\r\n          .then(data => {\r\n            if ('data' in data && Array.isArray(data.data)) {\r\n              // Group the rosters by day\r\n              const groupedByDay = data.data.reduce((acc, roster) => {\r\n                const day = roster.dayslot.day;\r\n                if (!acc[day]) {\r\n                  acc[day] = [];\r\n                }\r\n                acc[day].push(roster);\r\n                return acc;\r\n              }, {});\r\n    \r\n              this.setState({\r\n                rosters: data.data,\r\n                groupedByDay: groupedByDay // Store the grouped rosters in the state\r\n              });\r\n            } else {\r\n              console.error('Expected an object with a data property containing an array, but got ', data);\r\n            }\r\n          });\r\n\r\n\r\n          fetch(variables.API_URL + 'dayslot/') \r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if ('data' in data && Array.isArray(data.data)) {\r\n                const dayslots = data.data.map(dayslot => {\r\n                    return {\r\n                    id: dayslot.id,\r\n                    day: dayslot.day,\r\n                    slot: dayslot.slot\r\n                    };\r\n                });\r\n                console.log(dayslots); // Log the mapped dayslots array\r\n                this.setState({\r\n                    dayslots: dayslots\r\n                });\r\n                } else {\r\n                console.error('Expected an object with a data property containing an array of dayslot objects, but got ', data);\r\n                }\r\n            });\r\n\r\n\r\n\r\n            fetch(variables.API_URL + 'doctor/') \r\n            .then(response => response.json())\r\n            .then(data => {\r\n               if ('data' in data && Array.isArray(data.data)) {\r\n                 const doctors = data.data.map(doctor => {\r\n                   return {\r\n                     doctor_id: doctor.doctor_id,\r\n                     doctor_name: doctor.doctor_name,\r\n                     specialization: doctor.specialization\r\n                   };\r\n                 });\r\n                 console.log(doctors); // Log the mapped doctors array\r\n                 this.setState({\r\n                   doctors: doctors\r\n                 });\r\n               } else {\r\n                 console.error('Expected an object with a data property containing an array of doctor objects, but got ', data);\r\n               }\r\n            });\r\n    }\r\n    \r\n    \r\n\r\n      componentDidMount() {\r\n        this.refreshList();\r\n        }\r\n      /* changeRosterId = (e) => {\r\n            this.setState({ roster_id: e.target.value })\r\n        }\r\n        changeMonth = (e) => {\r\n            this.setState({ month: e.target.value })\r\n        }\r\n        changeYear = (e) => {\r\n            this.setState({ year: e.target.value })\r\n        }\r\n        toggle = () => {\r\n            this.setState(prevState => ({\r\n                showModal: !prevState.showModal\r\n            }));\r\n        };\r\n    \r\n        toggleDropdownDoctor = () => {\r\n            this.setState(prevState => ({\r\n                dropdownOpenDoctor: !prevState.dropdownOpenDoctor\r\n            }));\r\n        };\r\n        \r\n        toggleDropdownDayslot = () => {\r\n            this.setState(prevState => ({\r\n                dropdownOpenDayslot: !prevState.dropdownOpenDayslot\r\n            }));\r\n        };\r\n\r\n\r\n        addClick = () =>{\r\n            this.setState({\r\n                modalTitle: \"Add Roster\",\r\n                roster_id : \"\",\r\n                month : \"\",\r\n                year : \"\",\r\n                selectedDoctorId : \"\",\r\n                selectedDayslotId : \"\"\r\n            });\r\n            this.toggle();\r\n        }\r\n\r\n        handleDoctorSelection(selectedId) {\r\n            this.setState({\r\n                selectedDoctorId: selectedId\r\n            });\r\n        }\r\n        \r\n        handleDayslotSelection(selectedId) {\r\n            // Update the state\r\n            this.setState({\r\n                selectedDayslotId: selectedId\r\n            });\r\n        }\r\n         */\r\n           \r\n           \r\n       /*  createClick = () => {\r\n            // Construct the URL with the month, year, doctor, and dayslot as parameters\r\n            const url = `${variables.API_URL}roster/?month=${this.state.month}&year=${this.state.year}&doctor=${this.state.selectedDoctorId}&dayslot=${this.state.selectedDayslotId}`;\r\n        \r\n            // Make a GET request to the roster API\r\n            fetch(url)\r\n                .then(res => res.json())\r\n                .then(result => {\r\n                    // If a roster with the same month, year, doctor, and dayslot already exists, show an alert and return\r\n                    if (result.length > 0) {\r\n                        alert('Roster already exists.');\r\n                        return;\r\n                    }\r\n        \r\n                    // Otherwise, make a POST request to create a new roster\r\n                    fetch(variables.API_URL + 'roster/', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Accept': 'application/json',\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            roster_id: this.state.roster_id,\r\n                            month: this.state.month,\r\n                            year: this.state.year,\r\n                            doctor: this.state.selectedDoctorId,\r\n                            dayslot: this.state.selectedDayslotId\r\n                        })\r\n                    })\r\n                    .then(res => res.json())\r\n                    .then(result => {\r\n                        alert(JSON.stringify(result));\r\n                        this.refreshList();\r\n                    }, (error) => {\r\n                        alert('Failed');\r\n                    })\r\n                })\r\n        } */\r\n        \r\n        groupByDay(rosters) {\r\n            return rosters.reduce((groups, roster) => {\r\n                const day = roster.dayslot.day;\r\n                if (!groups[day]) {\r\n                    groups[day] = [];\r\n                }\r\n                groups[day].push(roster);\r\n                return groups;\r\n            }, {});\r\n        }\r\n\r\n        /* deleteClick(id) {\r\n            if (window.confirm('Are you sure?')) {\r\n                fetch(variables.API_URL + 'roster/' + id, {\r\n                    method: 'DELETE',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                    .then(res => res.json())\r\n                    .then(result => {\r\n                        alert(result);\r\n                        this.refreshList();\r\n    \r\n                    }, (error) => {\r\n                        alert('Failed');\r\n                    })\r\n            }\r\n        } */\r\n        render() {\r\n            const {\r\n                rosters,\r\n                /* modalTitle,\r\n                \r\n                roster_id,\r\n                month,\r\n                year,\r\n                doctors,\r\n                dayslots,\r\n                showModal, */\r\n                groupedByDay, \r\n                doctor: {\r\n                    doctor_id,\r\n                    doctor_name,\r\n                },\r\n                dayslot:{\r\n                    day,\r\n                    slot,\r\n                },\r\n                /* selectedDoctorId,\r\n                selectedDayslotId */\r\n            } = this.state;\r\n            \r\n            return (\r\n                <div>\r\n                    <div color=\"secondary\" className=\"mt-3 mx-auto\" style={{maxWidth: '90%'}}>\r\n                <Alert color=\"primary\">\r\n                This is {getMonthName(rosters[0]?.month)} month Roster\r\n                    </Alert>\r\n                    </div>\r\n        \r\n                    \r\n                    {/* <div className=\"mt-3 mx-auto\" style={{maxWidth: '90%'}}>\r\n                    <Button color=\"primary\" className=\"float-end\" onClick={this.addClick}>\r\n                    Register Roster\r\n                </Button> */}\r\n                <Table bordered className=\"mt-3 mx-auto\" style={{maxWidth: '90%'}}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Roster Id</th>\r\n                            <th>Day</th>\r\n                            <th>Slot</th>\r\n                            <th>Doctor Name</th>\r\n                            {/* <th>Options</th> */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n            {Object.keys(groupedByDay).map((day, dayIndex) => (\r\n                <React.Fragment key={dayIndex}>\r\n                    {groupedByDay[day].map((roster, rosterIndex) => (\r\n                        <tr key={roster.roster_id}>\r\n                            <td>{rosterIndex === 0 ? dayIndex + 1 : ''}</td>\r\n                            <td>{rosterIndex === 0 ? day : \"\"}</td>\r\n                            <td>{roster.dayslot.slot}</td>\r\n                            <td>{roster.doctor.doctor_name}</td>\r\n                            {/* <td>\r\n                                <Button outline color=\"danger\" onClick={() => this.deleteClick(roster.roster_id)}>\r\n                                    Delete\r\n                                </Button>\r\n                            </td> */}\r\n                        </tr>\r\n                    ))}\r\n                </React.Fragment>\r\n            ))}\r\n        </tbody>\r\n                </Table>\r\n                    </div>\r\n                        )}\r\n                       \r\n                    }\r\n                    export default StudentRoster;\r\n            \r\n                    {/* <Modal isOpen={showModal} toggle={this.toggle}>\r\n                    <ModalHeader toggle={this.toggle}>Add Roster</ModalHeader>\r\n\r\n                    <ModalBody>\r\n        <FormGroup>\r\n            <Label for=\"month\">Month</Label>\r\n            <Input type=\"select\" name=\"month\" id=\"month\" value={this.state.month} onChange={this.changeMonth}>\r\n                <option value=\"\">Select Month</option>\r\n                <option value=\"1\">January</option>\r\n                <option value=\"2\">February</option>\r\n                <option value=\"3\">March</option>\r\n                <option value=\"4\">April</option>\r\n                <option value=\"5\">May</option>\r\n                <option value=\"6\">June</option>\r\n                <option value=\"7\">July</option>\r\n                <option value=\"8\">August</option>\r\n                <option value=\"9\">September</option>\r\n                <option value=\"10\">October</option>\r\n                <option value=\"11\">November</option>\r\n                <option value=\"12\">December</option>\r\n            </Input>\r\n        </FormGroup>\r\n        <FormGroup>\r\n            <Label for=\"year\">Year</Label>\r\n            <Input type=\"number\" name=\"year\" id=\"year\" value={this.state.year} onChange={this.changeYear} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n    <Label for=\"doctor\">Doctor</Label>\r\n    <Dropdown isOpen={this.state.dropdownOpenDoctor} toggle={this.toggleDropdownDoctor}>\r\n        <DropdownToggle caret>\r\n            {this.state.selectedDoctorId ? this.state.selectedDoctorId : \"Select Doctor\"}\r\n        </DropdownToggle>\r\n        <DropdownMenu>\r\n            {this.state.doctors.map((doctor) => (\r\n                <DropdownItem key={doctor.doctor_id} onClick={() => this.handleDoctorSelection(doctor.doctor_id)}>\r\n                    {doctor.doctor_name} - {doctor.specialization}\r\n                </DropdownItem>\r\n            ))}\r\n        </DropdownMenu>\r\n    </Dropdown>\r\n</FormGroup>\r\n<FormGroup>\r\n    <Label for=\"dayslot\">Day Slot</Label>\r\n    <Dropdown isOpen={this.state.dropdownOpenDayslot} toggle={this.toggleDropdownDayslot}>\r\n        <DropdownToggle caret>\r\n            {this.state.selectedDayslotId ? this.state.selectedDayslotId : \"Select Day Slot\"}\r\n        </DropdownToggle>\r\n        <DropdownMenu>\r\n            {this.state.dayslots.map((dayslot) => (\r\n                <DropdownItem key={dayslot.id} onClick={() => this.handleDayslotSelection(dayslot.id)}>\r\n                    {dayslot.day}-{dayslot.slot}\r\n                </DropdownItem>\r\n            ))}\r\n        </DropdownMenu>\r\n    </Dropdown>\r\n</FormGroup>\r\n\r\n    </ModalBody>\r\n                                        <ModalFooter>\r\n                        <Button color=\"primary\" onClick={this.createClick}>Save</Button>\r\n                        <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>  */}\r\n                                   \r\n            \r\n        \r\n\r\n"],"mappings":"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S,CAAC2C,OAAO,GAAG,SAAS,CAAC,CACnCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACX,IAAI,MAAM,IAAIA,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAACA,IAAI,CAAC,EAAE;QAC9C,MAAMX,OAAO,GAAGW,IAAI,CAACA,IAAI,CAACU,GAAG,CAAC7B,MAAM,IAAI;UACtC,OAAO;YACLC,SAAS,EAAED,MAAM,CAACC,SAAS;YAC3BC,WAAW,EAAEF,MAAM,CAACE,WAAW;YAC/B8B,cAAc,EAAEhC,MAAM,CAACgC;UACzB,CAAC;QACH,CAAC,CAAC;QACFL,OAAO,CAACI,GAAG,CAACvB,OAAO,CAAC,CAAC,CAAC;QACtB,IAAI,CAACkB,QAAQ,CAAC;UACZlB,OAAO,EAAEA;QACX,CAAC,CAAC;MACJ,CAAC,MAAM;QACLmB,OAAO,CAACC,KAAK,CAAC,yFAAyF,EAAET,IAAI,CAAC;MAChH;IACH,CAAC,CAAC;EACV;EAIEc,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACpB,WAAW,CAAC,CAAC;EAClB;EACF;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAOO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEQqB,UAAUA,CAAC/B,OAAO,EAAE;IAChB,OAAOA,OAAO,CAACmB,MAAM,CAAC,CAACa,MAAM,EAAEX,MAAM,KAAK;MACtC,M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"},"metadata":{},"sourceType":"module","externalDependencies":[]}