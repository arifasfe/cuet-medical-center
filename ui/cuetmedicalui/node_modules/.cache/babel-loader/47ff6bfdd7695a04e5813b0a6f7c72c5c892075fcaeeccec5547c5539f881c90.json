{"ast":null,"code":"var _jsxFileName = \"E:\\\\CSE stuffs\\\\ML\\\\CUET Medical Center\\\\ui\\\\cuetmedicalui\\\\src\\\\Components\\\\Roster.js\";\nimport React, { Component } from \"react\";\nimport variables from './../variables';\nimport { Button, Popover, PopoverHeader, PopoverBody, Alert, Table, Modal, ModalHeader, ModalBody, FormGroup, Label, Input, ModalFooter, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getMonthName() {\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const d = new Date();\n  return months[d.getUTCMonth()];\n}\nexport function getCurrentTimeSlot() {\n  const hours = new Date().getHours();\n  if (hours >= 21 || hours < 9) {\n    return 'Evening';\n  } else if (hours >= 9 && hours < 15) {\n    return 'Morning';\n  } else {\n    return 'Noon';\n  }\n}\nexport function getCurrentDayOfWeek() {\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  return days[new Date().getDay()];\n}\nexport class Roster extends Component {\n  constructor(props) {\n    super(props);\n    this.changeRosterId = e => {\n      this.setState({\n        roster_id: e.target.value\n      });\n    };\n    this.changeMonth = e => {\n      this.setState({\n        month: e.target.value\n      });\n    };\n    this.changeYear = e => {\n      this.setState({\n        year: e.target.value\n      });\n    };\n    this.toggle = () => {\n      this.setState(prevState => ({\n        showModal: !prevState.showModal\n      }));\n    };\n    this.toggleDropdownDoctor = () => {\n      this.setState(prevState => ({\n        dropdownOpenDoctor: !prevState.dropdownOpenDoctor\n      }));\n    };\n    this.toggleDropdownDayslot = () => {\n      this.setState(prevState => ({\n        dropdownOpenDayslot: !prevState.dropdownOpenDayslot\n      }));\n    };\n    this.addClick = () => {\n      this.setState({\n        modalTitle: \"Add Roster\",\n        roster_id: \"\",\n        month: \"\",\n        year: \"\",\n        selectedDoctorId: \"\",\n        selectedDayslotId: \"\"\n      });\n      this.toggle();\n    };\n    this.createClick = () => {\n      // Construct the URL with the month, year, doctor, and dayslot as parameters\n      const url = `${variables.API_URL}roster/?month=${this.state.month}&year=${this.state.year}&doctor=${this.state.selectedDoctorId}&dayslot=${this.state.selectedDayslotId}`;\n\n      // Make a GET request to the roster API\n      fetch(url).then(res => res.json()).then(result => {\n        // If a roster with the same month, year, doctor, and dayslot already exists, show an alert and return\n        if (result.length > 0) {\n          alert('Roster already exists.');\n          return;\n        }\n\n        // Otherwise, make a POST request to create a new roster\n        fetch(variables.API_URL + 'roster/', {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            roster_id: this.state.roster_id,\n            month: this.state.month,\n            year: this.state.year,\n            doctor: this.state.selectedDoctorId,\n            dayslot: this.state.selectedDayslotId\n          })\n        }).then(res => res.json()).then(result => {\n          alert(JSON.stringify(result));\n          this.refreshList();\n        }, error => {\n          alert('Failed');\n        });\n      });\n    };\n    this.togglePopover = () => {\n      this.setState(prevState => ({\n        popoverOpen: !prevState.popoverOpen\n      }));\n    };\n    this.state = {\n      roster_id: 0,\n      month: \"\",\n      year: \"\",\n      modalTitle: \"\",\n      doctor: {\n        doctor_id: \"\",\n        doctor_name: \"\"\n      },\n      rosters: [],\n      groupedByDay: {},\n      dayslot: {\n        day: \"\",\n        slot: \"\"\n      },\n      doctors: [],\n      dayslots: [],\n      showModal: false,\n      dropdownOpenDoctor: false,\n      dropdownOpenDayslot: false,\n      popoverOpen: false\n    };\n  }\n  refreshList() {\n    fetch(variables.API_URL + 'roster/').then(response => response.json()).then(data => {\n      if ('data' in data && Array.isArray(data.data)) {\n        // Group the rosters by day\n        const groupedByDay = data.data.reduce((acc, roster) => {\n          const day = roster.dayslot.day;\n          if (!acc[day]) {\n            acc[day] = [];\n          }\n          acc[day].push(roster);\n          return acc;\n        }, {});\n        this.setState({\n          rosters: data.data,\n          groupedByDay: groupedByDay // Store the grouped rosters in the state\n        });\n      } else {\n        console.error('Expected an object with a data property containing an array, but got ', data);\n      }\n    });\n    fetch(variables.API_URL + 'dayslot/').then(response => response.json()).then(data => {\n      if ('data' in data && Array.isArray(data.data)) {\n        const dayslots = data.data.map(dayslot => {\n          return {\n            id: dayslot.id,\n            day: dayslot.day,\n            slot: dayslot.slot\n          };\n        });\n        console.log(dayslots); // Log the mapped dayslots array\n        this.setState({\n          dayslots: dayslots\n        });\n      } else {\n        console.error('Expected an object with a data property containing an array of dayslot objects, but got ', data);\n      }\n    });\n    fetch(variables.API_URL + 'doctor/').then(response => response.json()).then(data => {\n      if ('data' in data && Array.isArray(data.data)) {\n        const doctors = data.data.map(doctor => {\n          return {\n            doctor_id: doctor.doctor_id,\n            doctor_name: doctor.doctor_name,\n            specialization: doctor.specialization\n          };\n        });\n        console.log(doctors); // Log the mapped doctors array\n        this.setState({\n          doctors: doctors\n        });\n      } else {\n        console.error('Expected an object with a data property containing an array of doctor objects, but got ', data);\n      }\n    });\n  }\n  componentDidMount() {\n    this.refreshList();\n  }\n  handleDoctorSelection(selectedId) {\n    this.setState({\n      selectedDoctorId: selectedId\n    });\n  }\n  handleDayslotSelection(selectedId) {\n    // Update the state\n    this.setState({\n      selectedDayslotId: selectedId\n    });\n  }\n  groupByDay(rosters) {\n    return rosters.reduce((groups, roster) => {\n      const day = roster.dayslot.day;\n      if (!groups[day]) {\n        groups[day] = [];\n      }\n      groups[day].push(roster);\n      return groups;\n    }, {});\n  }\n  deleteClick(id) {\n    if (window.confirm('Are you sure?')) {\n      fetch(variables.API_URL + 'roster/' + id, {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(res => res.json()).then(result => {\n        alert(result);\n        this.refreshList();\n      }, error => {\n        alert('Failed');\n      });\n    }\n  }\n  render() {\n    var _rosters$;\n    const {\n      rosters,\n      modalTitle,\n      groupedByDay,\n      roster_id,\n      month,\n      year,\n      doctors,\n      dayslots,\n      showModal,\n      doctor: {\n        doctor_id,\n        doctor_name\n      },\n      dayslot: {\n        day,\n        slot\n      },\n      selectedDoctorId,\n      selectedDayslotId\n    } = this.state;\n    const now = new Date();\n    const utcMonth = now.getUTCMonth() + 1; // getUTCMonth returns 0-based month index, so we add 1\n    const utcYear = now.getUTCFullYear();\n    const currentDayOfWeek = getCurrentDayOfWeek();\n    const currentTimeSlot = getCurrentTimeSlot();\n    const currentDoctor = this.state.rosters.find(roster => roster.dayslot.day === currentDayOfWeek && roster.dayslot.slot === getCurrentTimeSlot());\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        color: \"secondary\",\n        className: \"mt-3 mx-auto\",\n        style: {\n          maxWidth: '80%',\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '1rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Alert, {\n            color: \"primary\",\n            className: \"float-start\",\n            children: [\"Doctor Roster:\", /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\" \", getMonthName((_rosters$ = rosters[0]) === null || _rosters$ === void 0 ? void 0 : _rosters$.month), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Alert, {\n            color: \"info \",\n            className: \"float-start\",\n            children: [\"Current Day:\", /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\" \", currentDayOfWeek, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Alert, {\n            color: \"info\",\n            className: \"float-start\",\n            children: [\"Current Time Slot: \", /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: getCurrentTimeSlot()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 48\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Alert, {\n            color: \"success\",\n            className: \"float-start\",\n            children: [\"Doctor on Duty: \", /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: currentDoctor ? currentDoctor.doctor.doctor_name : 'No Doctor Assigned'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            id: \"Popover1\",\n            type: \"button\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              width: \"16\",\n              height: \"16\",\n              fill: \"currentColor\",\n              class: \"bi bi-info-square\",\n              viewBox: \"0 0 16 16\",\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Popover, {\n            placement: \"right\",\n            isOpen: this.state.popoverOpen,\n            target: \"Popover1\",\n            toggle: this.togglePopover,\n            children: [/*#__PURE__*/_jsxDEV(PopoverHeader, {\n              children: \"Time Slots\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(PopoverBody, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Evening(21:00-9:00)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Morning(9:00-15:00)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Noon(15:00-21:00)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          className: \"float-end\",\n          onClick: this.addClick,\n          children: \"Update Roster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 mx-auto\",\n        style: {\n          maxWidth: '90%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          bordered: true,\n          className: \"mt-3 mx-auto\",\n          style: {\n            maxWidth: '90%',\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Roster Id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Day\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Slot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Doctor Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Options\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: Object.keys(groupedByDay).map((day, dayIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: groupedByDay[day].map((roster, rosterIndex) => {\n                // Only render the roster if its month and year match the current UTC month and year\n                if (roster.month === utcMonth && roster.year === utcYear) {\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: rosterIndex === 0 ? dayIndex + 1 : ''\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 353,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: rosterIndex === 0 ? day : \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 354,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: roster.dayslot.slot\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 355,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: roster.doctor.doctor_name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 356,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        outline: true,\n                        color: \"danger\",\n                        onClick: () => this.deleteClick(roster.roster_id),\n                        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                          xmlns: \"http://www.w3.org/2000/svg\",\n                          width: \"16\",\n                          height: \"16\",\n                          fill: \"currentColor\",\n                          className: \"bi bi-trash-fill\",\n                          viewBox: \"0 0 16 16\",\n                          children: /*#__PURE__*/_jsxDEV(\"path\", {\n                            d: \"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 360,\n                            columnNumber: 65\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 359,\n                          columnNumber: 61\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 358,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 357,\n                      columnNumber: 53\n                    }, this)]\n                  }, roster.roster_id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 352,\n                    columnNumber: 49\n                  }, this);\n                }\n              })\n            }, dayIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: showModal,\n        toggle: this.toggle,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: this.toggle,\n          children: \"Add Roster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"month\",\n              children: \"Month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"select\",\n              name: \"month\",\n              id: \"month\",\n              value: this.state.month,\n              onChange: this.changeMonth,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Month\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"1\",\n                children: \"January\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"2\",\n                children: \"February\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"3\",\n                children: \"March\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"4\",\n                children: \"April\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"5\",\n                children: \"May\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"6\",\n                children: \"June\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"7\",\n                children: \"July\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"8\",\n                children: \"August\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"9\",\n                children: \"September\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"10\",\n                children: \"October\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"11\",\n                children: \"November\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"12\",\n                children: \"December\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"year\",\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"number\",\n              name: \"year\",\n              id: \"year\",\n              value: this.state.year,\n              onChange: this.changeYear\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"doctor\",\n              children: \"Doctor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              isOpen: this.state.dropdownOpenDoctor,\n              toggle: this.toggleDropdownDoctor,\n              children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n                caret: true,\n                children: this.state.selectedDoctorId ? this.state.selectedDoctorId : \"Select Doctor\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n                children: this.state.doctors.map(doctor => /*#__PURE__*/_jsxDEV(DropdownItem, {\n                  onClick: () => this.handleDoctorSelection(doctor.doctor_id),\n                  children: [doctor.doctor_name, \" - \", doctor.specialization]\n                }, doctor.doctor_id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"dayslot\",\n              children: \"Day Slot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              isOpen: this.state.dropdownOpenDayslot,\n              toggle: this.toggleDropdownDayslot,\n              children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n                caret: true,\n                children: this.state.selectedDayslotId ? this.state.selectedDayslotId : \"Select Day Slot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    maxHeight: '200px',\n                    overflowY: 'auto'\n                  },\n                  children: this.state.dayslots.map(dayslot => /*#__PURE__*/_jsxDEV(DropdownItem, {\n                    onClick: () => this.handleDayslotSelection(dayslot.id),\n                    children: [dayslot.day, \"-\", dayslot.slot]\n                  }, dayslot.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 427,\n                    columnNumber: 45\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 425,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            onClick: this.createClick,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"secondary\",\n            onClick: this.toggle,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Roster;","map":{"version":3,"names":["React","Component","variables","Button","Popover","PopoverHeader","PopoverBody","Alert","Table","Modal","ModalHeader","ModalBody","FormGroup","Label","Input","ModalFooter","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","jsxDEV","_jsxDEV","getMonthName","months","d","Date","getUTCMonth","getCurrentTimeSlot","hours","getHours","getCurrentDayOfWeek","days","getDay","Roster","constructor","props","changeRosterId","e","setState","roster_id","target","value","changeMonth","month","changeYear","year","toggle","prevState","showModal","toggleDropdownDoctor","dropdownOpenDoctor","toggleDropdownDayslot","dropdownOpenDayslot","addClick","modalTitle","selectedDoctorId","selectedDayslotId","createClick","url","API_URL","state","fetch","then","res","json","result","length","alert","method","headers","body","JSON","stringify","doctor","dayslot","refreshList","error","togglePopover","popoverOpen","doctor_id","doctor_name","rosters","groupedByDay","day","slot","doctors","dayslots","response","data","Array","isArray","reduce","acc","roster","push","console","map","id","log","specialization","componentDidMount","handleDoctorSelection","selectedId","handleDayslotSelection","groupByDay","groups","deleteClick","window","confirm","render","_rosters$","now","utcMonth","utcYear","getUTCFullYear","currentDayOfWeek","currentTimeSlot","currentDoctor","find","children","color","className","style","maxWidth","display","justifyContent","alignItems","gap","fileName","_jsxFileName","lineNumber","columnNumber","type","xmlns","width","height","fill","class","viewBox","placement","isOpen","onClick","bordered","textAlign","Object","keys","dayIndex","Fragment","rosterIndex","outline","for","name","onChange","caret","maxHeight","overflowY"],"sources":["E:/CSE stuffs/ML/CUET Medical Center/ui/cuetmedicalui/src/Components/Roster.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport variables from './../variables';\r\nimport { Button, Popover, PopoverHeader, PopoverBody, Alert, Table, Modal, ModalHeader, ModalBody, FormGroup, Label, Input, ModalFooter, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\n\r\nfunction getMonthName() {\r\n    const months = [\r\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n    const d = new Date();\r\n    return months[d.getUTCMonth()];\r\n}\r\n\r\nexport function getCurrentTimeSlot() {\r\n    const hours = new Date().getHours();\r\n    if (hours >= 21 || hours < 9) {\r\n        return 'Evening';\r\n    } else if (hours >= 9 && hours < 15) {\r\n        return 'Morning';\r\n    } else {\r\n        return 'Noon';\r\n    }\r\n}\r\n\r\nexport function getCurrentDayOfWeek() {\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    return days[new Date().getDay()];\r\n}\r\n\r\nexport class Roster extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            roster_id: 0,\r\n            month: \"\",\r\n            year: \"\",\r\n            modalTitle: \"\",\r\n            doctor: {\r\n                doctor_id: \"\",\r\n                doctor_name: \"\",\r\n            },\r\n            rosters: [],\r\n            groupedByDay: {},\r\n            dayslot: {\r\n                day: \"\",\r\n                slot: \"\",\r\n            },\r\n            doctors: [],\r\n            dayslots: [],\r\n            showModal: false,\r\n            dropdownOpenDoctor: false,\r\n            dropdownOpenDayslot: false,\r\n            popoverOpen: false\r\n        }\r\n    }\r\n    refreshList() {\r\n\r\n        fetch(variables.API_URL + 'roster/')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if ('data' in data && Array.isArray(data.data)) {\r\n                    // Group the rosters by day\r\n                    const groupedByDay = data.data.reduce((acc, roster) => {\r\n                        const day = roster.dayslot.day;\r\n                        if (!acc[day]) {\r\n                            acc[day] = [];\r\n                        }\r\n                        acc[day].push(roster);\r\n                        return acc;\r\n                    }, {});\r\n\r\n                    this.setState({\r\n                        rosters: data.data,\r\n                        groupedByDay: groupedByDay // Store the grouped rosters in the state\r\n                    });\r\n                } else {\r\n                    console.error('Expected an object with a data property containing an array, but got ', data);\r\n                }\r\n            });\r\n\r\n\r\n        fetch(variables.API_URL + 'dayslot/')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if ('data' in data && Array.isArray(data.data)) {\r\n                    const dayslots = data.data.map(dayslot => {\r\n                        return {\r\n                            id: dayslot.id,\r\n                            day: dayslot.day,\r\n                            slot: dayslot.slot\r\n                        };\r\n                    });\r\n                    console.log(dayslots); // Log the mapped dayslots array\r\n                    this.setState({\r\n                        dayslots: dayslots\r\n                    });\r\n                } else {\r\n                    console.error('Expected an object with a data property containing an array of dayslot objects, but got ', data);\r\n                }\r\n            });\r\n\r\n\r\n\r\n        fetch(variables.API_URL + 'doctor/')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if ('data' in data && Array.isArray(data.data)) {\r\n                    const doctors = data.data.map(doctor => {\r\n                        return {\r\n                            doctor_id: doctor.doctor_id,\r\n                            doctor_name: doctor.doctor_name,\r\n                            specialization: doctor.specialization\r\n                        };\r\n                    });\r\n                    console.log(doctors); // Log the mapped doctors array\r\n                    this.setState({\r\n                        doctors: doctors\r\n                    });\r\n                } else {\r\n                    console.error('Expected an object with a data property containing an array of doctor objects, but got ', data);\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshList();\r\n    }\r\n    changeRosterId = (e) => {\r\n        this.setState({ roster_id: e.target.value })\r\n    }\r\n    changeMonth = (e) => {\r\n        this.setState({ month: e.target.value })\r\n    }\r\n    changeYear = (e) => {\r\n        this.setState({ year: e.target.value })\r\n    }\r\n    toggle = () => {\r\n        this.setState(prevState => ({\r\n            showModal: !prevState.showModal\r\n        }));\r\n    };\r\n\r\n    toggleDropdownDoctor = () => {\r\n        this.setState(prevState => ({\r\n            dropdownOpenDoctor: !prevState.dropdownOpenDoctor\r\n        }));\r\n    };\r\n\r\n    toggleDropdownDayslot = () => {\r\n        this.setState(prevState => ({\r\n            dropdownOpenDayslot: !prevState.dropdownOpenDayslot\r\n        }));\r\n    };\r\n\r\n\r\n    addClick = () => {\r\n        this.setState({\r\n            modalTitle: \"Add Roster\",\r\n            roster_id: \"\",\r\n            month: \"\",\r\n            year: \"\",\r\n            selectedDoctorId: \"\",\r\n            selectedDayslotId: \"\"\r\n        });\r\n        this.toggle();\r\n    }\r\n\r\n    handleDoctorSelection(selectedId) {\r\n        this.setState({\r\n            selectedDoctorId: selectedId\r\n        });\r\n    }\r\n\r\n    handleDayslotSelection(selectedId) {\r\n        // Update the state\r\n        this.setState({\r\n            selectedDayslotId: selectedId\r\n        });\r\n    }\r\n\r\n\r\n\r\n    createClick = () => {\r\n        // Construct the URL with the month, year, doctor, and dayslot as parameters\r\n        const url = `${variables.API_URL}roster/?month=${this.state.month}&year=${this.state.year}&doctor=${this.state.selectedDoctorId}&dayslot=${this.state.selectedDayslotId}`;\r\n\r\n        // Make a GET request to the roster API\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                // If a roster with the same month, year, doctor, and dayslot already exists, show an alert and return\r\n                if (result.length > 0) {\r\n                    alert('Roster already exists.');\r\n                    return;\r\n                }\r\n\r\n                // Otherwise, make a POST request to create a new roster\r\n                fetch(variables.API_URL + 'roster/', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        roster_id: this.state.roster_id,\r\n                        month: this.state.month,\r\n                        year: this.state.year,\r\n                        doctor: this.state.selectedDoctorId,\r\n                        dayslot: this.state.selectedDayslotId\r\n                    })\r\n                })\r\n                    .then(res => res.json())\r\n                    .then(result => {\r\n                        alert(JSON.stringify(result));\r\n                        this.refreshList();\r\n                    }, (error) => {\r\n                        alert('Failed');\r\n                    })\r\n            })\r\n    }\r\n\r\n    groupByDay(rosters) {\r\n        return rosters.reduce((groups, roster) => {\r\n            const day = roster.dayslot.day;\r\n            if (!groups[day]) {\r\n                groups[day] = [];\r\n            }\r\n            groups[day].push(roster);\r\n            return groups;\r\n        }, {});\r\n    }\r\n\r\n    togglePopover = () => {\r\n        this.setState(prevState => ({\r\n            popoverOpen: !prevState.popoverOpen\r\n        }));\r\n    };\r\n    \r\n\r\n    deleteClick(id) {\r\n        if (window.confirm('Are you sure?')) {\r\n            fetch(variables.API_URL + 'roster/' + id, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(result => {\r\n                    alert(result);\r\n                    this.refreshList();\r\n\r\n                }, (error) => {\r\n                    alert('Failed');\r\n                })\r\n        }\r\n    }\r\n\r\n    \r\n    render() {\r\n        const {\r\n            rosters,\r\n            modalTitle,\r\n            groupedByDay,\r\n            roster_id,\r\n            month,\r\n            year,\r\n            doctors,\r\n            dayslots,\r\n            showModal,\r\n            doctor: {\r\n                doctor_id,\r\n                doctor_name,\r\n            },\r\n            dayslot: {\r\n                day,\r\n                slot,\r\n            },\r\n            selectedDoctorId,\r\n            selectedDayslotId\r\n        } = this.state;\r\n\r\n        const now = new Date();\r\n        const utcMonth = now.getUTCMonth() + 1; // getUTCMonth returns 0-based month index, so we add 1\r\n        const utcYear = now.getUTCFullYear();\r\n        const currentDayOfWeek = getCurrentDayOfWeek();\r\n        const currentTimeSlot = getCurrentTimeSlot();\r\n        const currentDoctor = this.state.rosters.find(roster => roster.dayslot.day === currentDayOfWeek && roster.dayslot.slot === getCurrentTimeSlot());\r\n\r\n\r\n        return (\r\n            <div>\r\n                <div color=\"secondary\" className=\"mt-3 mx-auto\" style={{ maxWidth: '80%', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    <div style={{ display: 'flex', gap: '1rem' }}>\r\n                        <Alert color=\"primary\" className=\"float-start\">\r\n                            Doctor Roster:<h4> {getMonthName(rosters[0]?.month)} </h4>\r\n                        </Alert>\r\n                        <Alert color=\"info \" className=\"float-start\">\r\n                            Current Day:<h4> {currentDayOfWeek} </h4>\r\n                        </Alert>\r\n                        <Alert color=\"info\" className=\"float-start\">\r\n                            Current Time Slot: <h4>{getCurrentTimeSlot()}</h4>\r\n                        </Alert>\r\n                        <Alert color=\"success\" className=\"float-start\">\r\n                            Doctor on Duty: <h4>{currentDoctor ? currentDoctor.doctor.doctor_name : 'No Doctor Assigned'}</h4>\r\n                        </Alert>\r\n                        <Button id=\"Popover1\" type=\"button\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-info-square\" viewBox=\"0 0 16 16\">\r\n                        <path d=\"M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z\"/>\r\n                        <path d=\"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0\"/>\r\n                        </svg>\r\n                        </Button>\r\n                        <Popover placement=\"right\" isOpen={this.state.popoverOpen} target=\"Popover1\" toggle={this.togglePopover}>\r\n                            <PopoverHeader>Time Slots</PopoverHeader>\r\n                            <PopoverBody>\r\n                                <p>Evening(21:00-9:00)</p>\r\n                                <p>Morning(9:00-15:00)</p>\r\n                                <p>Noon(15:00-21:00)</p>\r\n                            </PopoverBody>\r\n                        </Popover>\r\n\r\n                    </div>\r\n                    <Button color=\"primary\" className=\"float-end\" onClick={this.addClick}>\r\n                        Update Roster\r\n                    </Button>\r\n                </div>\r\n\r\n                <div className=\"mt-3 mx-auto\" style={{ maxWidth: '90%' }}>\r\n\r\n                    <Table bordered className=\"mt-3 mx-auto\" style={{ maxWidth: '90%', textAlign: 'center' }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Roster Id</th>\r\n                                <th>Day</th>\r\n                                <th>Slot</th>\r\n                                <th>Doctor Name</th>\r\n                                <th>Options</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n\r\n                            {Object.keys(groupedByDay).map((day, dayIndex) => (\r\n                                <React.Fragment key={dayIndex}>\r\n                                    {groupedByDay[day].map((roster, rosterIndex) => {\r\n                                        // Only render the roster if its month and year match the current UTC month and year\r\n                                        if (roster.month === utcMonth && roster.year === utcYear) {\r\n                                            return (\r\n                                                <tr key={roster.roster_id}>\r\n                                                    <td>{rosterIndex === 0 ? dayIndex + 1 : ''}</td>\r\n                                                    <td>{rosterIndex === 0 ? day : \"\"}</td>\r\n                                                    <td>{roster.dayslot.slot}</td>\r\n                                                    <td>{roster.doctor.doctor_name}</td>\r\n                                                    <td>\r\n                                                        <Button outline color=\"danger\" onClick={() => this.deleteClick(roster.roster_id)}>\r\n                                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-trash-fill\" viewBox=\"0 0 16 16\">\r\n                                                                <path d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\" />\r\n                                                            </svg>\r\n                                                        </Button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        }\r\n                                    })}\r\n                                </React.Fragment>\r\n                            ))}\r\n\r\n                        </tbody>\r\n                    </Table>\r\n\r\n\r\n                </div>\r\n\r\n                <Modal isOpen={showModal} toggle={this.toggle}>\r\n                    <ModalHeader toggle={this.toggle}>Add Roster</ModalHeader>\r\n\r\n                    <ModalBody>\r\n                        <FormGroup>\r\n                            <Label for=\"month\">Month</Label>\r\n                            <Input type=\"select\" name=\"month\" id=\"month\" value={this.state.month} onChange={this.changeMonth}>\r\n                                <option value=\"\">Select Month</option>\r\n                                <option value=\"1\">January</option>\r\n                                <option value=\"2\">February</option>\r\n                                <option value=\"3\">March</option>\r\n                                <option value=\"4\">April</option>\r\n                                <option value=\"5\">May</option>\r\n                                <option value=\"6\">June</option>\r\n                                <option value=\"7\">July</option>\r\n                                <option value=\"8\">August</option>\r\n                                <option value=\"9\">September</option>\r\n                                <option value=\"10\">October</option>\r\n                                <option value=\"11\">November</option>\r\n                                <option value=\"12\">December</option>\r\n                            </Input>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"year\">Year</Label>\r\n                            <Input type=\"number\" name=\"year\" id=\"year\" value={this.state.year} onChange={this.changeYear} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"doctor\">Doctor</Label>\r\n                            <Dropdown isOpen={this.state.dropdownOpenDoctor} toggle={this.toggleDropdownDoctor}>\r\n                                <DropdownToggle caret>\r\n                                    {this.state.selectedDoctorId ? this.state.selectedDoctorId : \"Select Doctor\"}\r\n                                </DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    {this.state.doctors.map((doctor) => (\r\n                                        <DropdownItem key={doctor.doctor_id} onClick={() => this.handleDoctorSelection(doctor.doctor_id)}>\r\n                                            {doctor.doctor_name} - {doctor.specialization}\r\n                                        </DropdownItem>\r\n                                    ))}\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"dayslot\">Day Slot</Label>\r\n                            <Dropdown isOpen={this.state.dropdownOpenDayslot} toggle={this.toggleDropdownDayslot}>\r\n                                <DropdownToggle caret>\r\n                                    {this.state.selectedDayslotId ? this.state.selectedDayslotId : \"Select Day Slot\"}\r\n                                </DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    <div style={{ maxHeight: '200px', overflowY: 'auto' }}>\r\n                                        {this.state.dayslots.map((dayslot) => (\r\n                                            <DropdownItem key={dayslot.id} onClick={() => this.handleDayslotSelection(dayslot.id)}>\r\n                                                {dayslot.day}-{dayslot.slot}\r\n                                            </DropdownItem>\r\n                                        ))}\r\n                                    </div>\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </FormGroup>\r\n\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={this.createClick}>Save</Button>\r\n                        <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\nexport default Roster;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}